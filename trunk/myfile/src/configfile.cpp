//#include "scrambled_symbols.h"
#include "configfile.hxx"
#include "priv/configfileimpl.hxx"
#include <stdio.h>  // to use 'sscanf'.

#include <assert.h>
#include <iostream>

using namespace std;

// Function provided by the Configuration File Parser (config_parser.y).
extern bool Config_Start_Read(const char *file, ConfigFileImpl *cfi);

// The following global variables allow to control the behavior
// of the parser and lexers. These are builtin functionality
// generated by bison and flex.
extern int config_flex_debug;
extern int configdebug;

///////////////////////////////////////////////////////////////////////////////
//
////////////////////
ConfigFileImpl::ConfigFileImpl()
  : _filename(), _values(), _debug_mode(false)
{
	/** configuration for CentralS.*/
	_values.insert(make_pair(string("LockFile"),string("centrals_master.lock")));
	_values.insert(make_pair(string("LogFile"),string("d:\\centrals_master.log")));
	_values.insert(make_pair(string("DBHost"),string("localhost")));
	_values.insert(make_pair(string("DBLogin"),string("centrals")));
	_values.insert(make_pair(string("DBPassword"),string("centrals")));
	_values.insert(make_pair(string("DBName"),string("centrals")));
	_values.insert(make_pair(string("SPort"),string("4019")));
	_values.insert(make_pair(string("CPort"),string("4018")));
	_values.insert(make_pair(string("DBPort"),string("3306")));

	/** configuration for AXChatter.*/
	_values.insert(make_pair(string("CentralSHost"),string("www.lokuang.com")));
	//_values.insert(make_pair(string("CentralSHost"),string("localhost")));
	_values.insert(make_pair(string("CentralSCPort"),string("4018")));
	//_values.insert(make_pair(string("AudioBitsPerSample"),string("16")));
	//_values.insert(make_pair(string("AudioChannelNB"),string("1")));
	//_values.insert(make_pair(string("AudioSampleRate"),string("8000")));
	//_values.insert(make_pair(string("AudioDurationPerSample"),string("20")));	//In ms(milliseconds)
	//_values.insert(make_pair(string("AudioBlockNB"),string("10")));
	//_values.insert(make_pair(string("ConverterQuality"),string("8")));
	//_values.insert(make_pair(string("ConverterTail"),string("1200")));

	_values.insert(make_pair(string("Debug"),string("1")));
}

ConfigFileImpl::~ConfigFileImpl()
{
  _values.clear();
}


void ConfigFileImpl::SetDebugMode(bool mode)
{
  _debug_mode=mode;
}


bool ConfigFileImpl::Read(const string &config_file)
{
  _filename=config_file;

  config_flex_debug=_debug_mode;
  configdebug=_debug_mode;

  return (Config_Start_Read(_filename.c_str(), this));
}

bool ConfigFileImpl::GetValue(const string &key, string &value) const
{
  bool res;

  tContainerCIt cit;

  cit=_values.find(key);

  if (cit==_values.end())
    {
      value='\0';
      res=false;
    }
  else
    {
      value=(*cit).second;
      res=true;
    }

  return res;
}

bool ConfigFileImpl::GetValue(const string &key, tSInt32 *value) const
{
  string svalue;
  int res;

  GetValue(key,svalue);

  res=sscanf(svalue.c_str(),"%d",value);

  return res!=0;
}

void ConfigFileImpl::SetValue(const string &key, const string &value)
{
  tContainer::iterator it;

  it = _values.find(key);

  if (it== _values.end())
    {
      _values.insert(make_pair(key,value));
    }
  else
    {
      _values[key]=value;
    }
}

const string &ConfigFileImpl::Name() const 
{ 
  return _filename; 
}

///////////////////////////////////////////////////////////////////////////////
//
////////////////////
ConfigFile::ConfigFile()
{
  _impl=new ConfigFileImpl();
}

ConfigFile::ConfigFile(const ConfigFile &model)
{
#if !defined(RELEASE)
  cerr<<"ConfigFile::ConfigFile(const ConfigFile &model): This function is not supposed to be called! Crashing."<<endl; cerr.flush();
  // This constructor should never be used!
  assert(0);
#endif
}

ConfigFile::~ConfigFile()
{
  delete _impl;
}

void ConfigFile::SetDebugMode(bool mode)
{
  _impl->SetDebugMode(mode);
}

tBool ConfigFile::Read(const string &config_file)
{
  return _impl->Read(config_file);
}
 
tBool ConfigFile::GetValue(const string &key, string &value) const
{
  return _impl->GetValue(key,value);
}

tBool ConfigFile::GetValue(const string &key, tSInt32 *value) const
{
  return _impl->GetValue(key,value);
}

void ConfigFile::SetValue(const string &key, const string &value)
{
  _impl->SetValue(key,value);
}

const string &ConfigFile::Name() const
{
  return _impl->Name();
}
